1) O código tem as seguintes variáveis:

INDICE = 13
SOMA = 0
K = 0
A estrutura "Enquanto K < INDICE" indica que o loop continuará enquanto K for menor que INDICE.

Iterações do loop:
K = 0: K é incrementado para 1, SOMA = 0 + 1 = 1
K = 1: K é incrementado para 2, SOMA = 1 + 2 = 3
K = 2: K é incrementado para 3, SOMA = 3 + 3 = 6
K = 3: K é incrementado para 4, SOMA = 6 + 4 = 10
K = 4: K é incrementado para 5, SOMA = 10 + 5 = 15
K = 5: K é incrementado para 6, SOMA = 15 + 6 = 21
K = 6: K é incrementado para 7, SOMA = 21 + 7 = 28
K = 7: K é incrementado para 8, SOMA = 28 + 8 = 36
K = 8: K é incrementado para 9, SOMA = 36 + 9 = 45
K = 9: K é incrementado para 10, SOMA = 45 + 10 = 55
K = 10: K é incrementado para 11, SOMA = 55 + 11 = 66
K = 11: K é incrementado para 12, SOMA = 66 + 12 = 78
K = 12: K é incrementado para 13, SOMA = 78 + 13 = 91
Após a última iteração, K se torna 13, e o loop para, pois K não é mais menor que INDICE.

Resultado final:
O valor da variável SOMA ao final do processamento é 91.




2) def fibonacci(n):
    fib_sequence = [0, 1]
    while True:
        next_fib = fib_sequence[-1] + fib_sequence[-2]
        if next_fib > n:
            break
        fib_sequence.append(next_fib)
    return fib_sequence

def main():
    # Número a ser verificado (pode ser definido diretamente ou obtido via input)
    numero = int(input("Informe um número: "))

    # Calcula a sequência de Fibonacci até o número informado
    fib_sequence = fibonacci(numero)

    # Verifica se o número está na sequência
    if numero in fib_sequence:
        print(f"O número {numero} pertence à sequência de Fibonacci.")
    else:
        print(f"O número {numero} não pertence à sequência de Fibonacci.")

if __name__ == "__main__":
    main()


3) def calcular_faturamento(faturamentos):
    # Calculando o menor e o maior faturamento
    menor_faturamento = min(faturamentos)
    maior_faturamento = max(faturamentos)

    # Calculando a média mensal (considerando dias com faturamento)
    dias_com_faturamento = [f for f in faturamentos if f > 0]
    media_mensal = sum(dias_com_faturamento) / len(dias_com_faturamento) if dias_com_faturamento else 0

    # Contando o número de dias com faturamento acima da média
    dias_acima_da_media = sum(1 for f in faturamentos if f > media_mensal)

    return menor_faturamento, maior_faturamento, dias_acima_da_media

def main():
    # Exemplo de vetor de faturamento diário
    faturamentos_diarios = [1500, 2000, 2500, 3000, 0, 1000, 1200, 1800, 0, 2500, 3000, 3200, 0]

    # Chamando a função de cálculo
    menor, maior, dias_acima_media = calcular_faturamento(faturamentos_diarios)

    # Exibindo os resultados
    print(f"Menor faturamento: R${menor:.2f}")
    print(f"Maior faturamento: R${maior:.2f}")
    print(f"Número de dias com faturamento acima da média mensal: {dias_acima_media}")

if __name__ == "__main__":
    main()

4) def calcular_percentuais(faturamentos):
    total_faturamento = sum(faturamentos.values())
    percentuais = {estado: (valor / total_faturamento) * 100 for estado, valor in faturamentos.items()}
    return total_faturamento, percentuais

def main():
    # Faturamento mensal por estado
    faturamentos = {
        'SP': 67836.43,
        'RJ': 36678.66,
        'MG': 29229.88,
        'ES': 27165.48,
        'Outros': 19849.53
    }

    # Calculando percentuais
    total, percentuais = calcular_percentuais(faturamentos)

    # Exibindo os resultados
    print(f"Total de faturamento mensal: R${total:.2f}\n")
    for estado, percentual in percentuais.items():
        print(f"Percentual de {estado}: {percentual:.2f}%")

if __name__ == "__main__":
    main()


5) def inverter_string(s):
    # Inicializa uma string vazia para armazenar o resultado
    string_invertida = ""
    
    # Itera sobre a string original do final para o começo
    for i in range(len(s) - 1, -1, -1):
        string_invertida += s[i]  # Adiciona cada caractere ao resultado
    
    return string_invertida

def main():
    # Entrada da string (pode ser definida ou solicitada ao usuário)
    entrada = input("Informe uma string para inverter: ")

    # Chama a função de inversão
    resultado = inverter_string(entrada)

    # Exibe o resultado
    print(f"String invertida: {resultado}")

if __name__ == "__main__":
